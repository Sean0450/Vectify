#pragma once

#include <iostream>
#include <vector>

#include "Controller/Command.h"


////////////////////////////////////////////////////////////////////////////////
//
/// Реализация менеджера управления событиями модели. События хранятся на стеках undo/redo.
//
////////////////////////////////////////////////////////////////////////////////
class UndoRedo
{
  std::vector<std::shared_ptr<Command>> m_undo;
  std::vector<std::shared_ptr<Command>> m_redo;

public:
  //-----------------------------------------------------------------------------
  //Отменяет последнее событие модели.
  //--
  void Undo();
  //-----------------------------------------------------------------------------
  //Возвращает последнее отмененное действие модели.
  //--
  void Redo();
  //-----------------------------------------------------------------------------
  //Добавляет новое действие на вершину стека undo.
  //--
  void AddCommand(std::shared_ptr<Command> command);
  //-----------------------------------------------------------------------------
  //Проверка стека undo на непустоту.
  //--
  bool UndoHasValue() const noexcept { return !m_undo.empty(); }
  //-----------------------------------------------------------------------------
  //Проверка стека redo на непустоту.
  //--
  bool RedoHasValue() const noexcept { return !m_redo.empty(); }
  //-----------------------------------------------------------------------------
  //Ощистка стектов. Необходима, например, при создании нового документа.
  //--
  void Clear() noexcept
  {
    m_undo.clear();
    m_redo.clear();
  }
};
