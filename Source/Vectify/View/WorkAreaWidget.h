#pragma once

#include <QtWidgets>

#include "Model/ButtonsList.h"
#include "View/DocumentControlBar.h"
#include "View/Painter.h"
#include "View/ViewPort.h"
#include "View/WorkAreaWidgetObserver.h"


////////////////////////////////////////////////////////////////////////////////
//
/*В классе создаются виджет рабочей области, указывается область просмотра, обрабатываются события.
Список событий: нажатие кнопки мыши, отпускание кнопки мыши, перемешение курсора, нажатие клавиши, перемещение колеса мыши.*/
//
////////////////////////////////////////////////////////////////////////////////
class WorkAreaWidget : public QWidget
{
  Q_OBJECT
  ////////////////////////////////////////////////////////////////////////////////
  //
  /*Класс необходим для различной обработки перемещения курсора мыши по рабочей области*/
  //
  ////////////////////////////////////////////////////////////////////////////////
  class MouseMoveState
  {
  public:
    //-----------------------------------------------------------------------------
    //Виртуальный деструктор для базового класса.
    //---
    virtual ~MouseMoveState() = default;
    virtual void MouseMove(WorkAreaWidget & workArea, QPoint position) = 0;
  };

  ////////////////////////////////////////////////////////////////////////////////
  //
  /*Класс обработки перемещения курсора при зажатой левой кнопке мыши. Сохраняет предыдущую позицию курсора*/
  //
  ////////////////////////////////////////////////////////////////////////////////
  class ViewPortMoveState : public MouseMoveState
  {
    QPoint m_lastClickedPosition;

  public:
    //-----------------------------------------------------------------------------
    //Обработка перемещения мыши при зажатой левой кнопке.
    //---
    virtual void MouseMove(WorkAreaWidget & workArea, QPoint position) override;
    //-----------------------------------------------------------------------------
    //Запоминаем предыдущее положение курсора при перемещении мыши с зажатой левой кнопкой.
    //---
    void SetPrevious(const QPoint & point);
  };

  ////////////////////////////////////////////////////////////////////////////////
  //
  /*Класс обработки перемещения по умолчанию*/
  //
  ////////////////////////////////////////////////////////////////////////////////
  class DefaultState : public MouseMoveState
  {
  public:
    //-----------------------------------------------------------------------------
    //Обработка перемещения мыши в состоянии по умолчанию.
    //---
    virtual void MouseMove(WorkAreaWidget & workArea, QPoint position) override;
  };
  std::weak_ptr<WorkAreaWidgetObserver> m_observer;
  ViewPort m_viewPort;
  bool m_needRepaint = false;
  MouseMoveState * m_mouseMoveState = nullptr;
  DefaultState m_defaultState;
  ViewPortMoveState m_moveViewPortState;
  QPoint m_previousTranslate;

private:
  //-----------------------------------------------------------------------------
  /*Перерисовка рабочей области с сохранением предыдущего смещения координат.
Уведомления наблюдателя о перерисовке.*/
  //---
  void paintEvent(QPaintEvent * paintEvent);

  //-----------------------------------------------------------------------------
  //Обработка перемещения мыши.
  //---
  void mouseMoveEvent(QMouseEvent * mouseEvenet);

  //-----------------------------------------------------------------------------
  //Обработка клика мыши. При необходимости, изменение состояния перемещения.
  //---
  void mousePressEvent(QMouseEvent * mouseEvent);

  //-----------------------------------------------------------------------------
  //Обработка отпускания кнопки мыши
  //---
  void mouseReleaseEvent(QMouseEvent * mouseEvent);

  //-----------------------------------------------------------------------------
  //Обработка нажатия клавиши с передачей информации о нажатой кнопке с помощью наблюдателя.
  //---
  void keyPressEvent(QKeyEvent * keyEvent);

  //-----------------------------------------------------------------------------
  /*Обработка перемещениния колеса мыши.
Трансформация координат для плавного перемещения.
Уведомление наблюдателя.*/
  //---
  void wheelEvent(QWheelEvent * wheelMoveEvent);

  //-----------------------------------------------------------------------------
  //После каждого действия на области проверяем: нужна ли перерисовка?
  //---
  void PostEventProcessing();

public:
  //-----------------------------------------------------------------------------
  /*
 Конструтор. Установка state перемещения мыши в состояние по умолчанию. 
 Подключение сигнала с панели управления документом.
 */
  //---
  WorkAreaWidget(QWidget * parent, DocumentControlBar & toolBar);

  //-----------------------------------------------------------------------------
  //Установка наблюдателя
  //---
  void SetObserver(std::weak_ptr<WorkAreaWidgetObserver> observer);

  //-----------------------------------------------------------------------------
  //Возводим флаг о необходимости перерисовки
  //---
  void SetNeedRepaint();
};
